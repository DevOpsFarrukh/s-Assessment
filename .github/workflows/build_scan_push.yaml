name: DB - Build, Scan, and Deploy Docker Image

on:
  push:
    branches:
      - main   # Change to your target branch
    paths-ignore:
      - 'HelloWorldApp/nodeport.yaml'
  pull_request:
    types: [opened, synchronize, reopened]

# permissions:
#   contents: write  # Allows the workflow to modify repository contents

jobs:
  build-scan-and-push:
    runs-on: ubuntu-latest  # Using GitHub-hosted runner
    env:
      MAVEN_VERSION: 3.9.6
      DOCKER_IMAGE_NAME: java
      DOCKER_TAG: latest
      DOCKER_USERNAME: farrukhdock #${{ secrets.DOCKER_USERNAME }}  # Use GitHub secrets for credentials
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}      
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # Doesn't save default credentials

      # Step 2: Set up Maven environment
      - name: Install Maven 3.9.6
        run: |
          #echo "Installing Maven $MAVEN_VERSION..."
          #wget https://dlcdn.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz -P ${{ runner.temp }}
          #tar -xzf ${{ runner.temp }}/apache-maven-${MAVEN_VERSION}-bin.tar.gz -C ${{ runner.temp }}
          #echo "MAVEN_HOME=${{ runner.temp }}/apache-maven-${MAVEN_VERSION }}" >> $GITHUB_ENV
          #echo "PATH=${{ runner.temp }}/apache-maven-${MAVEN_VERSION }}/bin:$PATH" >> $GITHUB_ENV


          # Download Maven
          echo "Downloading Maven..."
          wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz
          
          # Extract Maven
          echo "Extracting Maven..."
          sudo tar -xzf apache-maven-3.9.6-bin.tar.gz -C /opt/
          
          # Rename directory
          echo "Setting up Maven directory..."
          sudo mv /opt/apache-maven-3.9.6 /opt/maven
          
          # Set up environment variables
          echo "Configuring environment variables..."
          echo "MAVEN_HOME=/opt/maven" >> $GITHUB_ENV
          echo "PATH=/opt/maven/bin:$PATH" >> $GITHUB_ENV
          
      - name: Set up Maven environment
        run: |
          echo "Setting up Maven environment..."
          mvn -version
      
      # Step 3: Setup Trivy for Scanning
      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # Step 4: Build with Maven
      - name: Build with Maven
        run: |
          echo "Building the project..."
          cd HelloWorldApp
          mvn clean
          mvn install

      # Step 5 : Build Docker Image
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          cd HelloWorldApp
          docker build -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .

      # Step 6 : Scan Docker Image
      - name: Scan Docker image with Trivy
        id: trivy_scan
        run: |
          echo "Scanning Docker image with Trivy..."
          cd HelloWorldApp
          trivy image --exit-code 0 --severity CRITICAL,HIGH --format json --no-progress $DOCKER_IMAGE_NAME:$DOCKER_TAG > trivy_report.json

          HIGH_COUNT=$(grep -o '"Severity": "HIGH"' trivy_report.json | wc -l)
          CRITICAL_COUNT=$(grep -o '"Severity": "CRITICAL"' trivy_report.json | wc -l)

          HIGH_COUNT=${HIGH_COUNT:-0}
          CRITICAL_COUNT=${CRITICAL_COUNT:-0}

          TOTAL_HIGH_CRITICAL=$((HIGH_COUNT + CRITICAL_COUNT))

          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "Total High + Critical vulnerabilities: $TOTAL_HIGH_CRITICAL"

          echo "high_critical_count=$TOTAL_HIGH_CRITICAL" >> $GITHUB_ENV

      
      - name: Check vulnerability threshold
        if: ${{ env.high_critical_count > 5 }}
        run: |
          echo "Vulnerability count exceeds threshold. Aborting push to Docker Hub."
          exit 1

      # Step 7 : Docker Login
      - name: Docker Login
        if: ${{ env.high_critical_count <= 5 }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # Step 8 : Docker Image Push to Dockerhub
      - name: Tag and push Docker image to DockerHub
        if: ${{ env.high_critical_count <= 5 }}
        run: |
          echo "Tagging Docker image..."
          docker tag $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_TAG
          echo "Pushing Docker image to DockerHub..."
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_TAG
